[{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Paul Boutros. Maintainer.","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Boutros DPC (2022). BoutrosLab.statistics.survival: Utility Statistical Functions Survival Analyses. R package version 0.4.20, https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/.","code":"@Manual{,   title = {BoutrosLab.statistics.survival: Utility Statistical Functions for Survival Analyses},   author = {Dr. Paul C. Boutros},   year = {2022},   note = {R package version 0.4.20},   url = {https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/}, }"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/CUREcoxph.html","id":null,"dir":"Reference","previous_headings":"","what":"Proportional Hazards Mixture Cure Model (MCM) — CUREcoxph","title":"Proportional Hazards Mixture Cure Model (MCM) — CUREcoxph","text":"Estimates PH-MCM EM algorithm. Returns coefficients survival (beta) cure (gamma) models. reference notation see http://post.queensu.ca/~pengp/papers/Peng2014_4.pdf.","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/CUREcoxph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Proportional Hazards Mixture Cure Model (MCM) — CUREcoxph","text":"","code":"CUREcoxph(survform,cureform,So,X,bootstrap=NULL,verbose=TRUE,subset=NULL,tol=1e-3,max.iter=50);"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/CUREcoxph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proportional Hazards Mixture Cure Model (MCM) — CUREcoxph","text":"survform character formula passed survival model cureform character formula passed cure model Surv() object data data.frame columns contain survform + cureform variables bootstrap Number bootstrap iterations conduct; NULL, execute verbose Prints updates function execution subset Subsets dat index tol L2 parameter tolerance max.iter Maximum number iterations EM algorithm","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/CUREcoxph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Proportional Hazards Mixture Cure Model (MCM) — CUREcoxph","text":"Returns list parameters survival (beta) cure (gamma) models, along 95 percent CI bootstrap argument used.","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/CUREcoxph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Proportional Hazards Mixture Cure Model (MCM) — CUREcoxph","text":"Erik Drysdale","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/CUREcoxph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Proportional Hazards Mixture Cure Model (MCM) — CUREcoxph","text":"","code":"# # Simple example  # library(survival) # library(BoutrosLab.statistics.survival) # df <- survival::cancer # So <- with(df,Surv(time,status==2)) # # Normal Cox model # mdl.coxph <- coxph(So ~ age + factor(sex),data=df) # # Cure model # survform <- '~age+factor(sex)' # cureform <- '~age+factor(sex)' # mdl.cure <- CUREcoxph(survform,cureform,So,df,max.iter = 250) # coef.compare <- data.frame(coxph=c(NA,coef(mdl.coxph)),CUREcox=c(NA,mdl.cure$beta),CUREprob=mdl.cure$gamma) # rownames(coef.compare) <- c('intercept','age','sex') # print(round(coef.compare,3)) #  # # Run Bootstrap # mdl.bs <- CUREcoxph(survform,cureform,So,df,bootstrap=99,verbose=F,max.iter=250) # # Show 95 percent CI for PH coefficients (age is insignificant) # print(mdl.bs$beta)"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/calculate.median.followUp.time.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the median follow up time for a patient cohort — calculate.median.followUp.time","title":"Calculate the median follow up time for a patient cohort — calculate.median.followUp.time","text":"Calculate median follow time patient cohort, excluding patients already died.","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/calculate.median.followUp.time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the median follow up time for a patient cohort — calculate.median.followUp.time","text":"","code":"calculate.median.followUp.time(fu.time, vital.status, method);"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/calculate.median.followUp.time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the median follow up time for a patient cohort — calculate.median.followUp.time","text":"fu.time vector follow-time vital.status vector vital status patient. Must numeric (1 = death). method Either 1 2, 1 uses alive patients calculate median follow time, 2 uses Kaplan-Meier estimate potential follow-. See http://cemsiis.meduniwien.ac./fileadmin/msi_akim/CeMSIIS/KB/volltexte/Schemper_Smith_1996_CCT.pdf","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/calculate.median.followUp.time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the median follow up time for a patient cohort — calculate.median.followUp.time","text":"Median follow-time","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/calculate.median.followUp.time.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate the median follow up time for a patient cohort — calculate.median.followUp.time","text":"Emilie Lalonde","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/calculate.median.followUp.time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the median follow up time for a patient cohort — calculate.median.followUp.time","text":"","code":"# create some synthetic survival data survtime <- sample(seq(0.1,10,0.1), 100, replace = TRUE); vitalstat <- sample(c(0,1), 100, replace = TRUE);  # number median follow-up time calculate.median.followUp.time(   fu.time = survtime,   vital.status = vitalstat,   method = 1   ); #> [1] 5.3 calculate.median.followUp.time(   fu.time = survtime,   vital.status = vitalstat,   method = 2   ); #> median  #>    8.3"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/calculate.number.at.risk.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the number of patients at risk — calculate.number.at.risk","title":"Calculate the number of patients at risk — calculate.number.at.risk","text":"survival object patient-grouping vector, calculate many patients risk vector time-points.","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/calculate.number.at.risk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the number of patients at risk — calculate.number.at.risk","text":"","code":"calculate.number.at.risk(survobj, cut.points);"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/calculate.number.at.risk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the number of patients at risk — calculate.number.at.risk","text":"survobj object class Surv (survival package) cut.points vector time-points number patients risk calculated","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/calculate.number.at.risk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the number of patients at risk — calculate.number.at.risk","text":"vector length length(cut.points) giving number patients risk time-point","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/calculate.number.at.risk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate the number of patients at risk — calculate.number.at.risk","text":"Paul C. Boutros","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/calculate.number.at.risk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the number of patients at risk — calculate.number.at.risk","text":"","code":"# create some synthetic survival data survtime <- sample(seq(0.1,10,0.1), 100, replace = TRUE); survstat <- sample(c(0,1), 100, replace = TRUE); survobj <- Surv(survtime, survstat);  # number of patients at risk at two-year intervals calculate.number.at.risk(   survobj = survobj,   cut.points = seq(0,10,2)   ); #> [1] 100  75  58  41  18   0"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/dichotomize.dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Dichotomize a single dataset — dichotomize.dataset","title":"Dichotomize a single dataset — dichotomize.dataset","text":"Split dataset two groups median-dichotomization","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/dichotomize.dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dichotomize a single dataset — dichotomize.dataset","text":"","code":"dichotomize.dataset(x);"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/dichotomize.dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dichotomize a single dataset — dichotomize.dataset","text":"x vector values dichotomized","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/dichotomize.dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dichotomize a single dataset — dichotomize.dataset","text":"vector data dichotomized onto 0/1 (low/high) scale.","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/dichotomize.dataset.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dichotomize a single dataset — dichotomize.dataset","text":"Paul C. Boutros","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/dichotomize.dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dichotomize a single dataset — dichotomize.dataset","text":"","code":"tmp <- data.frame(y = rnorm(100)); tmp$x <- dichotomize.dataset(tmp$y); boxplot(y ~ x, tmp);"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/esttime.logrank.perm.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate run time for Log-Rank Permutation Test — esttime.logrank.perm","title":"Estimate run time for Log-Rank Permutation Test — esttime.logrank.perm","text":"Calculates estimated run time performing log-rank permutation test N patients k variants","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/esttime.logrank.perm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate run time for Log-Rank Permutation Test — esttime.logrank.perm","text":"","code":"esttime.logrank.perm(N,k,no_cores=1,strat=FALSE,tform='secs',verbose=TRUE);"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/esttime.logrank.perm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate run time for Log-Rank Permutation Test — esttime.logrank.perm","text":"N number patients k number patients one groups no_cores Number cores used parallelize (efficiency peaks 6) strat Boolean whether stratification tform returned time value (default minutes). Options include: secs, mins, hours verbose Boolean whether print internal values","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/esttime.logrank.perm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate run time for Log-Rank Permutation Test — esttime.logrank.perm","text":"Returns expected run-time. Note, ignores time required initialize clusters create holder matrix. Warning, estimate based linear extrapolation, small errors magnify large number calculations.","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/esttime.logrank.perm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate run time for Log-Rank Permutation Test — esttime.logrank.perm","text":"Erik Drysdale","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/esttime.logrank.perm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate run time for Log-Rank Permutation Test — esttime.logrank.perm","text":"","code":"# library(survival) # N <- 50 # k <- 4 # tt <- rexp(N,1) # delta <- rep(1,N) # So <- as.matrix(Surv(tt,delta)) # x <- sample(c(rep(1,k),rep(0,N-k))) # ss <- sample(rep(c('a','b'),ceiling(N/2)))[1:N] # # 50 choose 4, no strata, one core # esttime.logrank.perm(N=N,k=k,no_cores=1,strat=FALSE,tform='secs',verbose=T) # print(system.time({logrank.perm(So,x,strat=NULL,verbose=F)})) # # 50 choose 4, no strata, two core core # esttime.logrank.perm(N=N,k=k,no_cores=2,strat=FALSE,tform='secs',verbose=T) # print(system.time({logrank.perm(So,x,strat=NULL,no_cores = 2,verbose=F)})) # # 50 choose 4, with strata, one core # esttime.logrank.perm(N=N,k=k,no_cores=1,strat=TRUE,tform='secs',verbose=T) # system.time({logrank.perm(So,x,strat=ss,verbose=F)}) # # 50 choose 4, with strata, two core # esttime.logrank.perm(N=N,k=k,no_cores=2,strat=TRUE,tform='secs',verbose=T) # system.time({logrank.perm(So,x,strat=ss,no_cores=2,verbose=F)})"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/fit.coxmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a Cox proportional hazards model — fit.coxmodel","title":"Fit a Cox proportional hazards model — fit.coxmodel","text":"Fit Cox model (possibly linear adjustments) return key statistics fit.","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/fit.coxmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a Cox proportional hazards model — fit.coxmodel","text":"","code":"fit.coxmodel(groups, survobj, other.data = NULL, stratification.factor,      stratification.value, rounding = 3, return.cox.model);"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/fit.coxmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a Cox proportional hazards model — fit.coxmodel","text":"groups Grouping patients (passed directly coxph, factors & continuous variables okay) survobj object class Surv (survival package) -- patient ordering needs identical groups .data data-frame (matrix?) variables controlled Cox model. null, adjustment done.  interactions fit. stratification.factor vector (factor) containing categorical variable cox model stratified.  many levels, possible model converge.  Use return.cox.model = TRUE verify model looks reasonable. stratification.value pre-determined value used split stratification factor. Must within range variable. (.e. strata(stratification.factor > stratification.value)). rounding Specifies number digits precision returned.  Defaults 3. return.cox.model TRUE, returns coxph object.  FALSE, returns summary statistics .  Defaults FALSE","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/fit.coxmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a Cox proportional hazards model — fit.coxmodel","text":"vector containing: HR, lower 95% CI HR, upper 95% CI HR, P-value (groups), number samples (total group assignments, although may included fit reasons upper-limit).","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/fit.coxmodel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fit a Cox proportional hazards model — fit.coxmodel","text":"Paul C. Boutros","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/fit.coxmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a Cox proportional hazards model — fit.coxmodel","text":"","code":"set.seed(151) survtime <- sample(seq(0.1,10,0.1), 100, replace = TRUE); survstat <- sample(c(0,1), 100, replace = TRUE); survobj <- Surv(survtime, survstat); groups <- sample(c('A','B'), 100, replace = TRUE); gender <- factor(sample(c('Male','Female'), 100, replace = TRUE), levels=c(\"Male\",\"Female\")); age <- factor(sample(c('Young','MiddleAged','Old'), 100, replace = TRUE),              levels = c('Young', 'MiddleAged', 'Old')); numbered.age <- sample(seq(40,90), 100, replace = TRUE);  fit.coxmodel(   groups = as.factor(groups),   survobj = survobj   ); #> [1]   0.9820000   0.5680000   1.6990000   0.9489288 100.0000000  fit.coxmodel(   groups = as.factor(groups),   survobj = survobj,   other.data = data.frame(age, gender),   return.cox.model = TRUE     ) #> Call: #> coxph(formula = survobj ~ ., data = variables) #>  #>                    coef exp(coef)  se(coef)      z     p #> groupsB       -0.006738  0.993284  0.283436 -0.024 0.981 #> ageMiddleAged  0.309967  1.363381  0.334560  0.926 0.354 #> ageOld         0.085883  1.089679  0.357212  0.240 0.810 #> genderFemale  -0.011759  0.988310  0.279433 -0.042 0.966 #>  #> Likelihood ratio test=0.93  on 4 df, p=0.9205 #> n= 100, number of events= 53   fit.coxmodel(   groups = as.factor(groups),   survobj = survobj,   other.data = data.frame(age),   stratification.factor = gender,   return.cox.model = TRUE   ) #> Call: #> coxph(formula = survobj ~ . + strata(stratification.factor),  #>     data = variables) #>  #>                  coef exp(coef) se(coef)     z     p #> groupsB       0.01045   1.01050  0.28531 0.037 0.971 #> ageMiddleAged 0.34932   1.41811  0.33385 1.046 0.295 #> ageOld        0.06706   1.06936  0.36314 0.185 0.853 #>  #> Likelihood ratio test=1.23  on 3 df, p=0.7457 #> n= 100, number of events= 53   fit.coxmodel(   groups = as.factor(groups),   survobj = survobj,   other.data = data.frame(gender),   stratification.factor = numbered.age,   stratification.value = 60,   return.cox.model = TRUE   ) #> Call: #> coxph(formula = survobj ~ . + strata(stratification.factor >  #>     stratification.value), data = variables) #>  #>                  coef exp(coef) se(coef)      z     p #> groupsB       0.01344   1.01353  0.28130  0.048 0.962 #> genderFemale -0.06420   0.93782  0.28476 -0.225 0.822 #>  #> Likelihood ratio test=0.05  on 2 df, p=0.9738 #> n= 100, number of events= 53"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/get.survival.rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the event-free rate — get.survival.rate","title":"Find the event-free rate — get.survival.rate","text":"Find event-free rates groups patients using Kaplan Meier method.","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/get.survival.rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the event-free rate — get.survival.rate","text":"","code":"get.survival.rate(surv.obj, groups, cut.points);"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/get.survival.rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the event-free rate — get.survival.rate","text":"surv.obj Surv object groups factor indicating patient grouping cut.points vector time points checked","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/get.survival.rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the event-free rate — get.survival.rate","text":"matrix levels(groups) x cut.points containing event-free rates combination.","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/get.survival.rate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find the event-free rate — get.survival.rate","text":"Emilie Lalonde","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/logrank.analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a logrank test — logrank.analysis","title":"Perform a logrank test — logrank.analysis","text":"Perform logrank test return summary statistics","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/logrank.analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a logrank test — logrank.analysis","text":"","code":"logrank.analysis(survival.object, groups);"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/logrank.analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a logrank test — logrank.analysis","text":"survival.object Survival object groups Factor variable indicating entries 'values' belong group logrank comparison","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/logrank.analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a logrank test — logrank.analysis","text":"Data frame relevant statistics","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/logrank.analysis.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Perform a logrank test — logrank.analysis","text":"Nathalie Moon","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/logrank.analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a logrank test — logrank.analysis","text":"","code":"set.seed(100);  survtime <- c(   sample(1:75, 100, replace = TRUE),   sample(1:99, 100, replace = TRUE)   );  survstat <- c(   sample( c(0,0,0,1,1), 100, replace = TRUE),   sample( c(0,0,0,1), 100, replace = TRUE)   );  survobj <- Surv(survtime, survstat); two.groups <- factor(c( rep('A', 100), rep('B', 100)), levels = c('A','B')); three.groups <- factor(c( rep('A', 100), rep('B', 50), rep('C', 50) ), levels = c('A','B','C'));  logrank.analysis(survobj, two.groups); #>   statistical.method       pvalue groups observed.groups expected.groups #> 1            logrank 4.152319e-05      A              41        25.53361 #> 2            logrank 4.152319e-05      B              26        41.46639 logrank.analysis(survobj, three.groups); #>   statistical.method       pvalue groups observed.groups expected.groups #> 1            logrank 0.0002074698      A              41        25.53361 #> 2            logrank 0.0002074698      B              13        19.12025 #> 3            logrank 0.0002074698      C              13        22.34614"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/logrank.perm.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-Rank Permutation Test — logrank.perm","title":"Log-Rank Permutation Test — logrank.perm","text":"Calculates log-rank statistic (N k) possible outcomes associated p-value null survival differences","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/logrank.perm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-Rank Permutation Test — logrank.perm","text":"","code":"logrank.perm(So, x, rho=0, strat=NULL, no_cores=1, verbose=TRUE);"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/logrank.perm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-Rank Permutation Test — logrank.perm","text":"Matrix-formatted Surv() object x Binary vector two groups rho scalar parameter controls type test (see survdiff()) strat Argument passed onto strata() no_cores Number cores use verbose Prints updates function execution","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/logrank.perm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-Rank Permutation Test — logrank.perm","text":"Returns data.frame number tests, number exceed baseline, logrank p-value (logrank) exact permutation-based p-value (exact)","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/logrank.perm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Log-Rank Permutation Test — logrank.perm","text":"Erik Drysdale","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/logrank.perm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-Rank Permutation Test — logrank.perm","text":"","code":"# # WARNING! FOR LARGE NUMBERS OF CALCULATIONS, REQUEST SUFFICIENT RAM OR PROGRAM MAY CRASH! # # # Example  # library(survival) # library(BoutrosLab.statistics.survival) # idx <- c(1:8,16:23) # Sob <- Surv(time=aml$time,event=aml$status)[idx,] # So <- as.matrix(Sob) # # Encode one of the groups # x <- ifelse(aml$x==\"Maintained\",1,0)[idx] # # Run the classical log-rank test # lrtest <- survdiff(Sob ~ x, rho=0) # # Permutation version # permtest <- logrank.perm(So,x,rho=0,no_cores=2,verbose=F) # # Compare p-values # print(sprintf(\"p-value from log-rank %0.3f and p-value from exact permutation test %0.3f\",permtest[\"logrank\"],permtest[\"exact\"])) # # Compare finite-sample bias to traditional log-rank test # nsim <- 500; N <- 25; k <- 2 # storage <- data.frame(matrix(NA,nrow=nsim,ncol=2)) # colnames(storage) <- c('chisq','exact') # # Begin loop # for (i in 1:nsim) { #   set.seed(i) #   idx <- sample(1:N,k) #   x <- rep(0,N) #   x[idx] <- 1 #   strat <- sample(rep(c(\"a\",\"b\"),ceiling(N/2)))[1:N] #   Tobs <- rexp(N,1) #   is.event <- rep(1,N) #   Sob <- Surv(time=Tobs,event=is.event) #   So <- as.matrix(Sob) #   lrtest <- survdiff(Surv(time=Tobs,event=is.event)~x+strata(strat)) #   pval.lrtest <- pchisq(lrtest$chisq,1,lower.tail=F) #   permtest <- logrank.perm(So=So,x=x,strat = strat,verbose=F) #   pval.permtest <- permtest$exact #   storage[i,] <- c(pval.lrtest,pval.permtest) # } # coverage <- apply(storage,2,function(cc) mean(cc <= 0.05,na.rm = F)) # print(coverage)"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/multi.point.HR.table.html","id":null,"dir":"Reference","previous_headings":"","what":"multi.point.HR.table — multi.point.HR.table","title":"multi.point.HR.table — multi.point.HR.table","text":"function estimate HR different time points (time windows) Cox PH assumption fails.","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/multi.point.HR.table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"multi.point.HR.table — multi.point.HR.table","text":"","code":"multi.point.HR.table(all.groups = NULL, all.survtime = NULL, all.survstat = NULL,      truncation.thresholds = c(5, 10), covariates = NULL)"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/multi.point.HR.table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"multi.point.HR.table — multi.point.HR.table","text":".groups Grouping patients (vector containing survival groups .survtime vector containing survival times .survstat vector containing survival status truncation.thresholds vector end points time windows HR estimated covariates data frame covariates included cox model","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/multi.point.HR.table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"multi.point.HR.table — multi.point.HR.table","text":"matrix HR, 95L CI, 95U CI, Wald P, n (samples) cox.zph P full time frame, time window established using truncation.thresholds","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/multi.point.HR.table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"multi.point.HR.table — multi.point.HR.table","text":"","code":"# set up survival data set.seed(100);  survtime.ph <- c(   sample(1:100, 100, replace = TRUE),   sample(1:60, 50, replace = TRUE),   sample(40:100, 50, replace = TRUE)   );  survstat.ph <- c(   sample( c(0,1), 100, replace = TRUE),   sample( c(0,0,0,0,1), 50, replace = TRUE),   sample( c(0,1,1,1,1), 50, replace = TRUE)   ); groups.ph <- factor(c(rep('A', 100), rep('B', 100)), levels = c('A','B'));  # try example without covariates, specifying cut points multi.point.HR.table(   all.groups = groups.ph,   all.survtime = survtime.ph,   all.survstat = survstat.ph,   truncation.thresholds = c(60)   ); #>          n    wald.p global.ph.p  group_HR group_CI95l group_CI95h group_cox.p #> Time60 200 0.5658418  0.07246465 0.8728447   0.5486906    1.388502   0.5658418 #>        group_ph.p #> Time60 0.07246465  # now try example with covariates gender.ph <- factor(sample(c(\"Male\",\"Female\"), 200, replace = TRUE), levels = c(\"Male\",\"Female\")); score.ph <- rgamma(n=200, shape = 20, rate=1); # this is just an arbitrary \"continuous\" variable multi.point.HR.table(   all.groups = groups.ph,   all.survtime = survtime.ph/12,    all.survstat = survstat.ph,   covariates = data.frame(gender = gender.ph, score = score.ph)   ); #> [1] \"Warning: max survtime was less than max cut point. New cut points are 4.16666666666667\" #> [2] \"Warning: max survtime was less than max cut point. New cut points are 8.33333333333333\" #>                        n    wald.p global.ph.p groupsB_HR groupsB_CI95l #> Time4.16666666666667 200 0.3688150   0.4792561  0.7651198     0.4479911 #> Time8.33333333333333  90 0.3259063   0.1219341  1.6357638     0.9398838 #>                      groupsB_CI95h groupsB_cox.p groupsB_ph.p genderFemale_HR #> Time4.16666666666667      1.306741    0.32692639    0.2072108        0.760277 #> Time8.33333333333333      2.846866    0.08174245    0.8752291        1.176518 #>                      genderFemale_CI95l genderFemale_CI95h genderFemale_cox.p #> Time4.16666666666667          0.4468397           1.293576          0.3121581 #> Time8.33333333333333          0.6781721           2.041067          0.5630408 #>                      genderFemale_ph.p  score_HR score_CI95l score_CI95h #> Time4.16666666666667         0.7255918 1.0239700   0.9767534    1.073469 #> Time8.33333333333333         0.3170440 0.9917997   0.9377078    1.049012 #>                      score_cox.p score_ph.p #> Time4.16666666666667   0.3253944 0.32507706 #> Time8.33333333333333   0.7735293 0.02574333"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/nnet.coxph.html","id":null,"dir":"Reference","previous_headings":"","what":"Feedforward neural network for right-censored survival data — nnet.coxph","title":"Feedforward neural network for right-censored survival data — nnet.coxph","text":"Implements simple (leaky) ReLU feedforward neural network using partial likelihood output node backprop tune model weights thereby allowing censoring","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/nnet.coxph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feedforward neural network for right-censored survival data — nnet.coxph","text":"","code":"nnet.coxph(X, So, layers, strat = NULL, X.test=NULL, So.test=NULL, strat.test=NULL,                        learning.rate=0.01, eta=1, num.epochs=1500, leaky=0,                        weights = NULL, sig=1,                        lam=0, keep.prob = NULL, adam=F, b1=0.9, b2=0.999, eps=1e-8, ss=1,                        standardize=T, verbose=T, checkgrads=F, coxbench=F)"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/nnet.coxph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feedforward neural network for right-censored survival data — nnet.coxph","text":"X design matrix column observation (transpose usual format R) Surv() object layers vector number nodes layer including terminal node one strat Index different strata X.test Desgin matrix estimate generalization accuracy training .test Surv() object estimate generalization accuracy training strat.test Strata index estimate generalization accuracy training learning.rate Gradient descent size eta Geometric decay rate learning rate: rate <- eta * rate num.epochs Number gradient steps (SGD implementation) leaky Activation function pmax(x,0) + pmin(x,0)*leaky) weights Values initialize weights sig Standard deviation noise weight initialization lam Lambda penalty L2-norm weights keep.prob Defaults 1, otherwise implements dropout adam Boolean whether use Adam gradient descent optimizer b1/b2 Hyperparameters Adam optimizer eps Noise denominator Adam optimizer ss Seeding number standardize Boolean whether standardize features verbose Boolean whether print output training checkgrads Boolean whether check backprop gradients match numerically derived estimates coxbench Boolean whether print loss function classical model","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/nnet.coxph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Feedforward neural network for right-censored survival data — nnet.coxph","text":"Returns list : weighted (weights), terminal function (aterminal), predicted risk scores (ahat), leaky parameter (leaky), column means SDs (vecMu vecSd) training rate (cost.df).","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/nnet.coxph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Feedforward neural network for right-censored survival data — nnet.coxph","text":"Erik Drysdale","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/nnet.coxph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Feedforward neural network for right-censored survival data — nnet.coxph","text":"","code":"# library(stringr) # library(glmnet) # library(BoutrosLab.statistics.survival) # # Generate survival data on a \"hazard ball\" # set.seed(1) # n.train <- 1000 # n.test <- 500 # x1 <- runif(n.train+n.test,-1,1) # x2 <- sample(sign(x1))*sqrt(1 - x1^2) # X <- cbind(x1,x2) # eta0 <- 1 + 0.5*X[,1]^2 + 2*X[,2]^2 # t0 <- -log(runif(n.train+n.test))/exp(eta0) # c0 <- rexp(n.train+n.test,rate=5) # tobs <- ifelse(c0 < t0, c0, t0) # delta <- ifelse(c0 < t0, 0, 1) # So <- Surv(tobs,delta) # So <- So[order(tobs)] # X <- X[order(tobs),] # # Training/test # X.train <- X[1:n.train,] # X.test <- X[-(1:n.train),] # So.train <- So[1:n.train] # So.test <- So[-(1:n.train)] # # Fit glmnet # mdl.train.glmnet <- cv.glmnet(x=X.train,y=as.matrix(So.train),family='cox') # eta.glmnet <- as.vector(predict.cv.glmnet(mdl.train.glmnet,newx=X.test,s='lambda.min')) # # Fit coxph # mdl.coxph <- coxph(So.train ~ .,data=data.frame(X.train)) # eta.coxph <- as.vector(predict(mdl.coxph,newdata=data.frame(X.test))) # # Fit neural network # mdl.snet <- nnet.coxph(X=t(X.train),So=So.train,learning.rate = 0.01, #                        layers = c(5,3,1),verbose = FALSE, #                        num.epochs = 1500,adam = F,lam = 0) # eta.snet <- as.vector(predict.snet(t(X.test),mdl.snet)) # # Compare accuracy # acc.glmnet <- survConcordance(So.test ~ eta.glmnet)$conc # acc.coxph <- survConcordance(So.test ~ eta.coxph)$conc # acc.snet <- survConcordance(So.test ~ eta.snet)$conc # cat(sprintf('Test C-index for: \\n glmnet: %0.2f\\n Cox-PH: %0.2f\\n Neural-Net: %0.2f', #               acc.glmnet,acc.coxph,acc.snet))"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/parse.cox.table.html","id":null,"dir":"Reference","previous_headings":"","what":"parse.cox.table — parse.cox.table","title":"parse.cox.table — parse.cox.table","text":"useful function format output coxph desired model complicated fit.coxmodel.","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/parse.cox.table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parse.cox.table — parse.cox.table","text":"","code":"parse.cox.table(cox.data, table.rownames = NULL, zph.p = NULL)"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/parse.cox.table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"parse.cox.table — parse.cox.table","text":"cox.data Output call coxph table.rownames Optional vector rownames output table zph.p optional vector p-values cox.zph call. NULL (default), cox.zph called function.","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/parse.cox.table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"parse.cox.table — parse.cox.table","text":"table HR, 95percent CI, p-value cox.zph p-value per variable cox model. Last row contains wald log-rank p value.","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/ph.fails.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to test Proportional Hazards (PH) assumption — ph.fails","title":"Utility function to test Proportional Hazards (PH) assumption — ph.fails","text":"utility function tests Proportional Hazards (PH) assumption.","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/ph.fails.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to test Proportional Hazards (PH) assumption — ph.fails","text":"","code":"ph.fails(cox.model, cox.zph.threshold = 0.1, pvalues = FALSE);"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/ph.fails.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to test Proportional Hazards (PH) assumption — ph.fails","text":"cox.model coxph object PH assumption checked. cox.zph.threshold threshold pvalue cox.zph test warnings /residual plots generated.  Defaults 0.1 pvalues TRUE, returns 1-row matrix pvalues cox.zph test.  FALSE, returns TRUE/FALSE indicator whether pvalues smaller cox.zph.threshold.  Defaults FALSE.","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/ph.fails.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to test Proportional Hazards (PH) assumption — ph.fails","text":"pvalues == TRUE, returns matrix pvalues cox.zph test.  pvalues == FALSE, returns boolean indicator whether PH assumption fails.","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/ph.fails.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Utility function to test Proportional Hazards (PH) assumption — ph.fails","text":"Nathalie Moon","code":""},{"path":[]},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/power.analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Power analysis for an expected hazard ratio — power.analysis","title":"Power analysis for an expected hazard ratio — power.analysis","text":"function moved BoutrosLab.statistics.power renamed power.cox.univariate. performs power analysis expected hazard ratio number events","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/power.analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power analysis for an expected hazard ratio — power.analysis","text":"","code":"power.analysis(event.number, HR, alpha = 0.05);"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/power.analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power analysis for an expected hazard ratio — power.analysis","text":"event.number Number indicating number events cohort HR Hazard ratio alpha Statistical level, defaults 0.05","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/power.analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power analysis for an expected hazard ratio — power.analysis","text":"power calculated given event.number HR","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/power.analysis.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Power analysis for an expected hazard ratio — power.analysis","text":"Maud HW. Starmans","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/power.analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power analysis for an expected hazard ratio — power.analysis","text":"","code":"HRseries <- c(100:250)/100; Powerseries <- power.analysis(100,HRseries); #> Warning: This function has been moved to BoutrosLab.statistics.power and renamed power.cox.univariate"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/stratacox.html","id":null,"dir":"Reference","previous_headings":"","what":"Elastic-Net Stratified Cox Model — stratacox","title":"Elastic-Net Stratified Cox Model — stratacox","text":"Implements Stratified Cox model elastic-net regularization transfer-weighting scheme","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/stratacox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Elastic-Net Stratified Cox Model — stratacox","text":"","code":"stratacox(X,So,strat,lam,alpha,tau=0,target=1,w=NULL,                           standardize=T,ord=T,max.iter=250,tol=1e-8,findlam=F,verbose=F)"},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/stratacox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Elastic-Net Stratified Cox Model — stratacox","text":"X model.matrix type object matrix .matrix(Surv()) object strat vector integers/characters specifying row respective strata lam/alpha Elastic net regularization parameters (see glmnet) tau Relative weighting put target dataset, 0 fair weighting (dataset size) 1 uses target's likelihood target Integer specifying strata levels used target w Initial weighting standardize Boolean whether standardize features ord Boolean whether dataset ordered strata/time already max.iter Maximum number gradient steps use tol L2 norm difference used end gradient dsecent findlam Boolean whether find largest lambda set features equal zero verbose Boolean whether print output training","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/stratacox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Elastic-Net Stratified Cox Model — stratacox","text":"Returns list : w (coefficient weights), ll (log-likelihood iterations), step (Barzilai-Borwein step size iterations), niter (number steps convergence).","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/stratacox.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Elastic-Net Stratified Cox Model — stratacox","text":"Erik Drysdale","code":""},{"path":"https://uclahs-cds.github.io/public-R-BoutrosLab-statistics-survival/reference/stratacox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Elastic-Net Stratified Cox Model — stratacox","text":"","code":"# # libraries # library(BoutrosLab.statistics.survival) # library(survival) # library(glmnet) # library(forcats) # library(data.table) # # Can stratified analysis help? # dir.base <- '/.mounts/labs/cpcgene/private/projects/GermlineSomaticAssociations/genome-wide/input/all/all' # setwd(dir.base) # # Load IGRT/RadP datasets # dat <- rbind(read.table('2017-11-16_IGRT-patient-matrix.txt',header=T), #              read.table('2017-11-16_RadP-patient-matrix.txt',header=T)) # dat$gleason <- fct_recode(dat$gleason,'3+4'='3+5','4+3'='4+4') # dat$gleason <- as.factor(ifelse(is.na(dat$gleason),'3+4',as.character(dat$gleason))) # # Survival and design # Xdat <- data.table(model.matrix(~primary_treatment+time_to_bcr+bcr+gleason+t_category+psa+age+ets_consensus+ #                                   kataegis_score+kataegis_binary+pga,data=dat)[,-1]) # colnames(Xdat)[1:3] <- c('strat','time','event') # colnames(Xdat) <- gsub('\\+','\\_',colnames(Xdat)) # Xdat[,strat := ifelse(strat==0,'IGRT','RadP')] # Xdat <- Xdat[order(strat,time)] # n.IGRT <- sum(Xdat$strat == 'IGRT') # n.RadP <- sum(Xdat$strat == 'RadP') # idx.IGRT <- which(Xdat$strat == 'IGRT') # idx.RadP <- which(Xdat$strat == 'RadP') # # Get baseline distribution # nsim <- 1000 # cn <- c('coxph','strata','wstrata') # store <- data.frame(matrix(NA,nrow=nsim,ncol=length(cn))) # colnames(store) <- cn # for (k in 1:nsim) {  #   if (k %% 25 == 0) print(k) #   set.seed(k) #   # Split data #   idx.IGRT.train <- sort(sample(idx.IGRT,floor(n.IGRT*0.8))) #   idx.IGRT.test <- setdiff(idx.IGRT,idx.IGRT.train) #   dat.train <- Xdat[c(idx.IGRT.train,idx.RadP)] #   dat.test <- Xdat[c(idx.IGRT.test)] #   # Formulas #   form.coxph <- as.formula(paste0('Surv(time,event)~',paste(colnames(dat.test)[-(1:3)],collapse='+'))) #   form.strata <- as.formula(paste0('Surv(time,event)~strata(strat)+',paste(colnames(dat.test)[-(1:3)],collapse='+'))) #   # Fit models #   mdl.coxph <- coxph(form.coxph,data=dat.train,ties = 'breslow',subset=(strat=='IGRT')) #   mdl.naivestrata <- coxph(form.strata,data=dat.train,ties = 'breslow') #   mdl.wstrata <- stratacox(X=as.matrix(dat.train[,-(1:3)]), #                                So=as.matrix(with(dat.train[,2:3],Surv(time,event))), #                                strat=dat.train$strat, #                                lam=0.01,alpha=1,tau=0.1,target=1,ord = F, #                                standardize = T,tol = 1e-5,max.iter = 200) #   # Make predictions #   eta.coxph <- predict(mdl.coxph,newdata=dat.test) #   eta.naivestrata <- predict(mdl.naivestrata,newdata=dat.test) #   eta.wstrata <- as.vector(as.matrix(dat.test[,-(1:3)]) %*% mdl.wstrata$w) #   # Predictions #   conc.coxph <- survConcordance(Surv(time,event)~eta.coxph,data=dat.test)$conc #   conc.naivestrata <- survConcordance(Surv(time,event)~eta.naivestrata,data=dat.test)$conc #   conc.wstrata <- survConcordance(Surv(time,event)~eta.wstrata,data=dat.test)$conc #   # Store #   store[k,] <- c(conc.coxph,conc.naivestrata,conc.wstrata) # } # # Gain by using strata's # t.test(store[,2],store[,1]) # # Gain from weight+regularization # t.test(store[,3],store[,2])"}]
